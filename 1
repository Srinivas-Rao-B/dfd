PK
     	7>[���      
   .gitignorenode_modules/
PK
     	7>[��2�
  
     eslint.config.jsimport globals from 'globals';
import js from '@eslint/js';
import reactRecommended from 'eslint-plugin-react/configs/recommended.js';
import reactRefresh from 'eslint-plugin-react-refresh';

export default [
  {
    ignores: ['dist', 'node_modules'],
  },
  js.configs.recommended,
  {
    ...reactRecommended,
    files: ['src/**/*.{js,jsx}'],
    languageOptions: {
      ...reactRecommended.languageOptions,
      globals: {
        ...globals.browser,
      },
    },
    plugins: {
        'react-refresh': reactRefresh,
    },
    rules: {
        'react-refresh/only-export-components': 'warn',
        'react/prop-types': 'off',
        'react/react-in-jsx-scope': 'off',
    },
    settings: {
        react: {
            version: 'detect',
        },
    },
  },
];
PK
     	7>[ۆ2k  k  
   index.html<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vidyamitra - Student Performance Tracker</title>

    <meta name="description" content="A comprehensive student performance tracker for colleges, built by Dualite Alpha." />
    <meta name="author" content="Dualite Alpha" />

    <meta property="og:title" content="Vidyamitra - Student Performance Tracker" />
    <meta property="og:description" content="A comprehensive student performance tracker for colleges, built by Dualite Alpha." />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://alpha.dualite.dev" />
    <meta property="og:image" content="https://i.ibb.co/67X3xfS/vidyamitra-preview.png" />
    <meta property="og:image:width" content="960" />
    <meta property="og:image:height" content="600" />
    <meta property="og:image:alt" content="Screenshot of the Vidyamitra application dashboard" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Vidyamitra - Student Performance Tracker" />
    <meta name="twitter:description" content="A comprehensive student performance tracker for colleges, built by Dualite Alpha." />
    <meta name="twitter:site" content="@dualitedev" />
    <meta name="twitter:image" content="https://i.ibb.co/67X3xfS/vidyamitra-preview.png" />

    <link rel="icon" type="image/png" sizes="16x16" href="https://i.ibb.co/HLfD5wg/dualite-favicon.png" />
    <link rel="canonical" href="https://alpha.dualite.dev" />

    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "name": "Vidyamitra",
        "url": "https://alpha.dualite.dev",
        "description": "A comprehensive student performance tracker for colleges, built by Dualite Alpha.",
        "publisher": {
          "@type": "Organization",
          "name": "Dualite Alpha"
        }
      }
    </script>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
PK
     	7>[�ґ�  �     package.json{
  "name": "vidyamitra-student-tracker",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@faker-js/faker": "^10.0.0",
    "@tailwindcss/forms": "^0.5.10",
    "axios": "^1.9.0",
    "echarts": "^6.0.0",
    "echarts-for-react": "^3.0.2",
    "eslint-plugin-react": "^7.37.5",
    "framer-motion": "^11.2.10",
    "lucide-react": "^0.511.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^6.23.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.27.0",
    "@vitejs/plugin-react": "^4.5.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.27.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "vite": "^6.3.5"
  }
}
PK
     	7>[S0�^   ^      postcss.config.jsexport default {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
};
PK
     	7>[               src/PK
     	7>[>��  �     src/App.jsximport React from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import { useAuth } from './context/AuthContext';

import LoginPage from './pages/LoginPage';
import DepartmentSelectPage from './pages/DepartmentSelectPage';
import AdminLayout from './components/AdminLayout';
import DashboardPage from './pages/DashboardPage';
import ManageFacultyPage from './pages/ManageFacultyPage';
import ManageStudentsPage from './pages/ManageStudentsPage';

const ProtectedRoute = ({ children }) => {
  const { user } = useAuth();

  if (!user || user.role !== 'admin') {
    return <Navigate to="/login" />;
  }

  return children;
};

function App() {
    const { user } = useAuth();

    return (
        <Routes>
            <Route path="/login" element={<LoginPage />} />
            
            <Route 
                path="/" 
                element={
                    !user ? <Navigate to="/login" /> : <Navigate to="/admin" />
                } 
            />

            <Route 
                path="/admin" 
                element={
                    <ProtectedRoute>
                        <AdminLayout />
                    </ProtectedRoute>
                }
            >
                <Route path="select-department" element={<DepartmentSelectPage />} />
                <Route path="dashboard/:department" element={<DashboardPage />} />
                <Route path="manage-faculty/:department" element={<ManageFacultyPage />} />
                <Route path="manage-students/:department" element={<ManageStudentsPage />} />
                <Route index element={<Navigate to="select-department" />} />
            </Route>

            <Route path="*" element={<Navigate to="/" />} />
        </Routes>
    );
}

export default App;
PK
     	7>[�t��@  @     src/index.css@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply bg-theme-pink-light text-theme-text;
  font-family: 'Inter', sans-serif;
}

/* Custom scrollbar for a cleaner look */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}
::-webkit-scrollbar-track {
  background: #f1f1f1;
}
::-webkit-scrollbar-thumb {
  background: #d1d5db;
  border-radius: 10px;
}
::-webkit-scrollbar-thumb:hover {
  background: #9ca3af;
}


@layer components {
  .btn-primary {
    @apply bg-theme-pink text-white font-bold py-2 px-4 rounded-lg hover:bg-theme-pink-dark transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-theme-pink focus:ring-opacity-50 disabled:bg-gray-400 disabled:cursor-not-allowed;
  }
  .card {
    @apply bg-white rounded-xl shadow-md transition-shadow duration-300 hover:shadow-lg;
  }
}
PK
     	7>[�bխ  �     src/main.jsximport React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App.jsx'
import { AuthProvider } from './context/AuthContext.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <App />
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>,
)
PK
     	7>[��0��  �     tailwind.config.js/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        'theme-pink-light': '#FFF5F7',
        'theme-pink': '#DB2777',
        'theme-pink-dark': '#BE185D',
        'theme-text': '#334155',
        'theme-text-light': '#64748B',
        'theme-bg-alt': '#F8FAFC',
      }
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
  ],
}
PK
     	7>[            
   src/pages/PK
     	7>[T�&��  �     src/pages/LoginPage.jsximport React, { useState } from 'react';
import { Navigate } from 'react-router-dom';
import { GraduationCap, KeyRound, User, AlertCircle } from 'lucide-react';
import { motion } from 'framer-motion';
import { useAuth } from '../context/AuthContext';

const LoginPage = () => {
    const { login, user } = useAuth();
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');

    const handleLogin = (e) => {
        e.preventDefault();
        setError('');
        const success = login(username, password);
        if (!success) {
            setError('Invalid credentials. Please try again.');
        }
    };

    if (user) {
        return <Navigate to="/admin" />;
    }

    return (
        <div className="min-h-screen flex items-center justify-center bg-theme-pink-light p-4">
            <motion.div
                initial={{ opacity: 0, y: -50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
                className="w-full max-w-md p-8 space-y-6 bg-white rounded-2xl shadow-lg"
            >
                <div className="text-center">
                    <div className="inline-block p-4 bg-theme-pink rounded-full mb-4">
                        <GraduationCap className="text-white h-10 w-10" />
                    </div>
                    <h1 className="text-3xl font-bold text-theme-text">Vidyamitra Portal</h1>
                    <p className="text-theme-text-light mt-2">Administrator Login</p>
                </div>

                <form className="space-y-6" onSubmit={handleLogin}>
                    {error && (
                        <motion.div
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg relative flex items-center"
                            role="alert"
                        >
                            <AlertCircle className="h-5 w-5 mr-2"/>
                            <span className="block sm:inline">{error}</span>
                        </motion.div>
                    )}
                    <div className="relative">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <User className="h-5 w-5 text-gray-400" />
                        </div>
                        <input
                            id="username"
                            name="username"
                            type="text"
                            autoComplete="username"
                            required
                            value={username}
                            onChange={(e) => setUsername(e.target.value)}
                            className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-theme-pink focus:border-theme-pink"
                            placeholder="Admin Username"
                        />
                    </div>

                    <div className="relative">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <KeyRound className="h-5 w-5 text-gray-400" />
                        </div>
                        <input
                            id="password"
                            name="password"
                            type="password"
                            autoComplete="current-password"
                            required
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-theme-pink focus:border-theme-pink"
                            placeholder="Password"
                        />
                    </div>

                    <div>
                        <motion.button
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            type="submit"
                            className="w-full btn-primary"
                        >
                            Sign In
                        </motion.button>
                    </div>
                </form>
                 <p className="text-center text-xs text-gray-500">
                    Use 'admin' and 'password' to log in.
                </p>
            </motion.div>
        </div>
    );
};

export default LoginPage;
PK
     	7>[��7F�  �  "   src/pages/DepartmentSelectPage.jsximport React from 'react';
import { useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Cpu, BrainCircuit, Waves } from 'lucide-react';

const departments = [
    { name: 'CSE', icon: Cpu, path: 'CSE' },
    { name: 'AIML', icon: BrainCircuit, path: 'AIML' },
    { name: 'ECE', icon: Waves, path: 'ECE' },
];

const DepartmentSelectPage = () => {
    const navigate = useNavigate();

    const handleSelect = (departmentPath) => {
        navigate(`/admin/dashboard/${departmentPath}`);
    };

    const containerVariants = {
        hidden: { opacity: 0 },
        visible: {
            opacity: 1,
            transition: {
                staggerChildren: 0.2,
            },
        },
    };

    const itemVariants = {
        hidden: { y: 20, opacity: 0 },
        visible: { y: 0, opacity: 1 },
    };

    return (
        <div className="flex flex-col items-center justify-center h-full p-4">
            <h1 className="text-4xl font-bold text-theme-text mb-2">Welcome, Admin!</h1>
            <p className="text-xl text-theme-text-light mb-12">Please select a department to manage.</p>
            <motion.div 
                className="grid grid-cols-1 md:grid-cols-3 gap-8 w-full max-w-4xl"
                variants={containerVariants}
                initial="hidden"
                animate="visible"
            >
                {departments.map((dept) => (
                    <motion.div key={dept.name} variants={itemVariants}>
                        <motion.button
                            whileHover={{ scale: 1.05, y: -5 }}
                            whileTap={{ scale: 0.95 }}
                            onClick={() => handleSelect(dept.path)}
                            className="w-full p-10 bg-white rounded-2xl shadow-lg flex flex-col items-center justify-center space-y-4 transition-all duration-300 hover:shadow-2xl"
                        >
                            <dept.icon className="h-16 w-16 text-theme-pink" />
                            <span className="text-2xl font-semibold text-theme-text">{dept.name}</span>
                        </motion.button>
                    </motion.div>
                ))}
            </motion.div>
        </div>
    );
};

export default DepartmentSelectPage;
PK
     	7>[               src/components/PK
     	7>[��wh#  #     src/components/AdminLayout.jsximport React from 'react';
import { Outlet, useLocation } from 'react-router-dom';
import Sidebar from './Sidebar';

const AdminLayout = () => {
    const location = useLocation();
    const showSidebar = location.pathname !== '/admin/select-department';

    return (
        <div className="flex min-h-screen bg-theme-pink-light">
            {showSidebar && <Sidebar />}
            <main className="flex-1 p-4 sm:p-6 lg:p-8 overflow-y-auto">
                <Outlet />
            </main>
        </div>
    );
};

export default AdminLayout;
PK
     	7>[�/:Wu!  u!     src/pages/DashboardPage.jsximport React, { useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Users, UserCog, Banknote, Landmark } from 'lucide-react';
import { mockData } from '../data/mockData';
import StatCard from '../components/dashboard/StatCard';
import DashboardChart from '../components/dashboard/DashboardChart';
import DepartmentEvents from '../components/dashboard/DepartmentEvents';
import FacultyDistribution from '../components/dashboard/FacultyDistribution';

const DashboardPage = () => {
    const { department } = useParams();
    const [selectedSem, setSelectedSem] = useState('all');

    const deptData = useMemo(() => {
        if (department !== 'AIML') {
            return { students: [], faculty: [], subjects: [] };
        }

        const students = mockData.students.filter(s =>
            selectedSem === 'all' || s.semester === selectedSem
        );
        const faculty = mockData.faculty;
        
        return { students, faculty };
    }, [department, selectedSem]);

    const stats = useMemo(() => {
        const totalStudents = selectedSem === 'all' 
            ? mockData.students.length 
            : deptData.students.length;
        const totalFaculty = department === 'AIML' ? mockData.faculty.length : 0;
        const feesPaid = deptData.students.reduce((acc, s) => acc + s.fees.paid, 0);
        const feesRemaining = deptData.students.reduce((acc, s) => acc + s.fees.remaining, 0);
        return { totalStudents, totalFaculty, feesPaid, feesRemaining };
    }, [deptData, department, selectedSem, mockData.students]);

    const chartData = useMemo(() => {
        if (department !== 'AIML') return null;

        const sections = ['A', 'B', 'C'];
        const semesters = Object.keys(mockData.departments.AIML.semesters).map(Number);

        if (selectedSem === 'all') {
             const seriesData = sections.map(section => {
                const averageScores = semesters.map(sem => {
                    const studentsInSectionAndSem = mockData.students.filter(s => s.semester === sem && s.section === section);
                    if (studentsInSectionAndSem.length === 0) return 0;

                    const totalScore = studentsInSectionAndSem.reduce((acc, student) => {
                        const studentTotal = student.performance.reduce((sAcc, p) => sAcc + p.score, 0);
                        const avgStudentScore = student.performance.length > 0 ? (studentTotal / student.performance.length) : 0;
                        return acc + avgStudentScore;
                    }, 0);

                    return parseFloat((totalScore / studentsInSectionAndSem.length).toFixed(2));
                });

                return {
                    name: `Section ${section}`,
                    type: 'bar',
                    stack: 'total',
                    label: { show: true, formatter: '{c}' },
                    emphasis: { focus: 'series' },
                    data: averageScores
                };
            });
            
            return { type: 'overall_stacked_horizontal', data: seriesData, categories: semesters.map(s => `Semester ${s}`) };

        } else {
            const subjectsForSem = mockData.departments.AIML.semesters[selectedSem]?.subjects || [];
            const studentsForSem = mockData.students.filter(s => s.semester === selectedSem);

            if (studentsForSem.length === 0) return null;

            const seriesData = sections.map(section => {
                const passedCounts = subjectsForSem.map(subject => {
                    return studentsForSem.filter(s => {
                        return s.section === section && s.performance.find(p => p.subject === subject)?.score >= 50;
                    }).length;
                });
                return {
                    name: `Section ${section}`,
                    type: 'bar',
                    stack: 'passed_students',
                    emphasis: { focus: 'series' },
                    data: passedCounts
                };
            });
            
            return { type: 'stacked_vertical', data: seriesData, categories: subjectsForSem };
        }
    }, [department, selectedSem]);

    const semesters = department === 'AIML' ? Object.keys(mockData.departments.AIML.semesters) : [];

    const containerVariants = {
        hidden: { opacity: 0 },
        visible: {
            opacity: 1,
            transition: {
                staggerChildren: 0.1,
            },
        },
    };

    if (department !== 'AIML') {
        return (
            <div className="flex flex-col items-center justify-center h-full text-center">
                <Landmark className="h-24 w-24 text-theme-text-light mb-4"/>
                <h1 className="text-2xl font-bold text-theme-text">Welcome to {department}</h1>
                <p className="text-theme-text-light">No data has been added for this department yet.</p>
            </div>
        )
    }

    return (
        <motion.div 
            initial="hidden"
            animate="visible"
            variants={containerVariants}
            className="space-y-6"
        >
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                <div>
                    <h1 className="text-3xl font-bold text-theme-text">{department} Dashboard</h1>
                    <p className="mt-1 text-theme-text-light">Overview of department progress.</p>
                </div>
            </div>

            <motion.div 
                className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6"
                variants={containerVariants}
            >
                <StatCard icon={Users} title="Total Students" value={stats.totalStudents} colorClass="bg-blue-500" />
                <StatCard icon={UserCog} title="Total Faculty" value={stats.totalFaculty} colorClass="bg-purple-500" />
                <StatCard icon={Banknote} title="Fees Paid" value={`₹${(stats.feesPaid / 100000).toFixed(2)}L`} colorClass="bg-green-500" />
                <StatCard icon={Banknote} title="Fees Remaining" value={`₹${(stats.feesRemaining / 100000).toFixed(2)}L`} colorClass="bg-red-500" />
            </motion.div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div className="lg:col-span-2 card p-6 space-y-4">
                    <h2 className="text-xl font-bold text-theme-text">Semester Progress</h2>
                    <div className="flex flex-wrap items-center gap-2">
                        <button
                            onClick={() => setSelectedSem('all')}
                            className={`px-4 py-2 text-sm font-semibold rounded-full transition-colors ${selectedSem === 'all' ? 'bg-theme-pink text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                        >
                            All Semesters
                        </button>
                        {semesters.map(sem => (
                            <button
                                key={sem}
                                onClick={() => setSelectedSem(Number(sem))}
                                className={`px-4 py-2 text-sm font-semibold rounded-full transition-colors ${selectedSem === Number(sem) ? 'bg-theme-pink text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                            >
                                Semester {sem}
                            </button>
                        ))}
                    </div>
                    
                    <div>
                        <h3 className="text-lg font-semibold text-theme-text mb-4">
                            {selectedSem === 'all' ? 'Average Score by Section per Semester' : `Semester ${selectedSem} Pass Count by Section`}
                        </h3>
                        {chartData ? (
                            <DashboardChart chartData={chartData} />
                        ) : (
                            <div className="flex items-center justify-center h-full text-theme-text-light py-20">
                                No performance data available for this selection.
                            </div>
                        )}
                    </div>
                </div>
                <div className="lg:col-span-1 space-y-6">
                     <FacultyDistribution />
                     <DepartmentEvents />
                </div>
            </div>
        </motion.div>
    );
};

export default DashboardPage;
PK
     	7>[���'  �'     src/pages/ManageFacultyPage.jsximport React, { useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import { motion } from 'framer-motion';
import { UserCog, Plus, Eye, Edit, Trash2, Landmark } from 'lucide-react';
import { mockData } from '../data/mockData';
import Modal from '../components/Modal';
import FacultyForm from '../components/faculty/FacultyForm';

const ManageFacultyPage = () => {
    const { department } = useParams();
    const [facultyList, setFacultyList] = useState(mockData.faculty.filter(f => f.ssn.includes(department)));
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [modalMode, setModalMode] = useState('add'); // 'add' or 'edit'
    const [selectedFaculty, setSelectedFaculty] = useState(null);
    const [filters, setFilters] = useState({ semester: 'all', section: 'all' });

    const handleFilterChange = (e) => {
        const { name, value } = e.target;
        setFilters(prev => ({ ...prev, [name]: value }));
    };

    const filteredFaculty = useMemo(() => {
        return facultyList.filter(faculty => {
            const semesterMatch = filters.semester === 'all' || faculty.allocations.semesters.includes(Number(filters.semester));
            const sectionMatch = filters.section === 'all' || faculty.allocations.sections.includes(filters.section);
            return semesterMatch && sectionMatch;
        });
    }, [facultyList, filters]);

    const openModal = (mode, faculty = null) => {
        setModalMode(mode);
        setSelectedFaculty(faculty);
        setIsModalOpen(true);
    };

    const closeModal = () => {
        setIsModalOpen(false);
        setSelectedFaculty(null);
    };

    const handleFormSubmit = (formData) => {
        if (modalMode === 'add') {
            const newFaculty = {
                ...formData,
                id: Date.now(), // Simple unique ID
                ssn: `F${department}${String(facultyList.length + 10).padStart(3, '0')}`,
            };
            setFacultyList(prev => [...prev, newFaculty]);
        } else {
            setFacultyList(prev => prev.map(f => f.id === selectedFaculty.id ? { ...f, ...formData } : f));
        }
        closeModal();
    };
    
    const handleDelete = (facultyId) => {
        if (window.confirm('Are you sure you want to remove this faculty member?')) {
            setFacultyList(prev => prev.filter(f => f.id !== facultyId));
        }
    };

    if (department !== 'AIML') {
        return (
            <div className="flex flex-col items-center justify-center h-full text-center">
                <Landmark className="h-24 w-24 text-theme-text-light mb-4"/>
                <h1 className="text-2xl font-bold text-theme-text">Manage Faculty for {department}</h1>
                <p className="text-theme-text-light">No faculty data has been added for this department yet.</p>
            </div>
        )
    }

    const semesters = Object.keys(mockData.departments[department].semesters);
    const sections = ['A', 'B', 'C'];

    return (
        <div className="space-y-6">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                <h1 className="text-3xl font-bold text-theme-text flex items-center">
                    <UserCog className="mr-3 text-theme-pink" />
                    Manage Faculty ({department})
                </h1>
                <button onClick={() => openModal('add')} className="btn-primary flex items-center justify-center">
                    <Plus className="h-5 w-5 mr-2" />
                    Add New Faculty
                </button>
            </div>

            <div className="card p-4">
                <div className="flex flex-col sm:flex-row gap-4">
                    <div>
                        <label htmlFor="semester" className="block text-sm font-medium text-gray-700">Filter by Semester</label>
                        <select id="semester" name="semester" onChange={handleFilterChange} value={filters.semester} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink">
                            <option value="all">All Semesters</option>
                            {semesters.map(sem => <option key={sem} value={sem}>Semester {sem}</option>)}
                        </select>
                    </div>
                     <div>
                        <label htmlFor="section" className="block text-sm font-medium text-gray-700">Filter by Section</label>
                        <select id="section" name="section" onChange={handleFilterChange} value={filters.section} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink">
                            <option value="all">All Sections</option>
                            {sections.map(sec => <option key={sec} value={sec}>{sec}</option>)}
                        </select>
                    </div>
                </div>
            </div>

            <motion.div 
                layout
                className="bg-white rounded-xl shadow-md overflow-hidden"
            >
                <div className="overflow-x-auto">
                    <table className="min-w-full text-sm divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name / SSN</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Designation</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Contact</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Allocations</th>
                                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                            {filteredFaculty.map(faculty => (
                                <motion.tr layout key={faculty.id} initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
                                    <td className="px-6 py-4 whitespace-nowrap">
                                        <div className="font-medium text-theme-text">{faculty.name}</div>
                                        <div className="text-gray-500">{faculty.ssn}</div>
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-theme-text-light">{faculty.designation}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">
                                        <div className="text-theme-text">{faculty.email}</div>
                                        <div className="text-gray-500">{faculty.phone}</div>
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap">
                                        <div className="flex flex-col space-y-1">
                                            <div className="flex flex-wrap gap-1">
                                                {faculty.allocations.role.map(role => (
                                                    <span key={role} className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-pink-100 text-pink-800">
                                                        {role}
                                                    </span>
                                                ))}
                                            </div>
                                            <div className="text-xs text-gray-500">
                                                Sem: {faculty.allocations.semesters.join(', ')} | Sec: {faculty.allocations.sections.join(', ')}
                                            </div>
                                        </div>
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                        <div className="flex items-center justify-end space-x-2">
                                            <button onClick={() => openModal('edit', faculty)} className="text-blue-600 hover:text-blue-900 p-2 rounded-full hover:bg-blue-100 transition-colors">
                                                <Eye className="h-5 w-5" />
                                            </button>
                                            <button onClick={() => openModal('edit', faculty)} className="text-yellow-600 hover:text-yellow-900 p-2 rounded-full hover:bg-yellow-100 transition-colors">
                                                <Edit className="h-5 w-5" />
                                            </button>
                                            <button onClick={() => handleDelete(faculty.id)} className="text-red-600 hover:text-red-900 p-2 rounded-full hover:bg-red-100 transition-colors">
                                                <Trash2 className="h-5 w-5" />
                                            </button>
                                        </div>
                                    </td>
                                </motion.tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </motion.div>
            
            <Modal isOpen={isModalOpen} onClose={closeModal}>
                <FacultyForm
                    initialData={selectedFaculty}
                    onSubmit={handleFormSubmit}
                    onCancel={closeModal}
                    mode={modalMode}
                    departmentData={mockData.departments[department]}
                />
            </Modal>
        </div>
    );
};

export default ManageFacultyPage;
PK
     	7>[�03��(  �(      src/pages/ManageStudentsPage.jsximport React, { useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Users, Plus, Eye, Edit, Trash2, Landmark, Search } from 'lucide-react';
import { mockData } from '../data/mockData';
import Modal from '../components/Modal';
import StudentForm from '../components/students/StudentForm';

const ManageStudentsPage = () => {
    const { department } = useParams();
    const [studentList, setStudentList] = useState(mockData.students.filter(s => s.department === department));
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [modalMode, setModalMode] = useState('add'); // 'add', 'edit', 'view'
    const [selectedStudent, setSelectedStudent] = useState(null);
    const [filters, setFilters] = useState({ semester: 'all', section: 'all' });
    const [searchQuery, setSearchQuery] = useState('');

    const handleFilterChange = (e) => {
        const { name, value } = e.target;
        setFilters(prev => ({ ...prev, [name]: value }));
    };

    const filteredStudents = useMemo(() => {
        return studentList.filter(student => {
            const semesterMatch = filters.semester === 'all' || student.semester === Number(filters.semester);
            const sectionMatch = filters.section === 'all' || student.section === filters.section;
            const searchMatch = searchQuery === '' ||
                student.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                student.usn.toLowerCase().includes(searchQuery.toLowerCase());
            return semesterMatch && sectionMatch && searchMatch;
        });
    }, [studentList, filters, searchQuery]);

    const openModal = (mode, student = null) => {
        setModalMode(mode);
        setSelectedStudent(student);
        setIsModalOpen(true);
    };

    const closeModal = () => {
        setIsModalOpen(false);
        setSelectedStudent(null);
    };

    const handleFormSubmit = (formData) => {
        if (modalMode === 'add') {
            const newStudent = {
                ...formData,
                id: Date.now(),
                usn: `1VA2${3 - formData.semester}${department}${String(studentList.length + 100).padStart(3, '0')}`,
                department: department,
                performance: mockData.departments[department].semesters[formData.semester].subjects.map(s => ({ subject: s, score: 0 }))
            };
            setStudentList(prev => [...prev, newStudent]);
        } else {
            setStudentList(prev => prev.map(s => s.id === selectedStudent.id ? { ...s, ...formData } : s));
        }
        closeModal();
    };
    
    const handleDelete = (studentId) => {
        if (window.confirm('Are you sure you want to remove this student?')) {
            setStudentList(prev => prev.filter(s => s.id !== studentId));
        }
    };

    if (department !== 'AIML') {
        return (
            <div className="flex flex-col items-center justify-center h-full text-center">
                <Landmark className="h-24 w-24 text-theme-text-light mb-4"/>
                <h1 className="text-2xl font-bold text-theme-text">Manage Students for {department}</h1>
                <p className="text-theme-text-light">No student data has been added for this department yet.</p>
            </div>
        )
    }
    
    const semesters = Object.keys(mockData.departments[department].semesters);
    const sections = ['A', 'B', 'C'];

    return (
        <div className="space-y-6">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                <h1 className="text-3xl font-bold text-theme-text flex items-center">
                    <Users className="mr-3 text-theme-pink" />
                    Manage Students ({department})
                </h1>
                <button onClick={() => openModal('add')} className="btn-primary flex items-center justify-center">
                    <Plus className="h-5 w-5 mr-2" />
                    Add New Student
                </button>
            </div>

            <div className="card p-4">
                <div className="flex flex-col sm:flex-row gap-4 items-center justify-between">
                    <div className="flex flex-col sm:flex-row gap-4 w-full sm:w-auto">
                        <div>
                            <label htmlFor="semester" className="block text-sm font-medium text-gray-700">Semester</label>
                            <select id="semester" name="semester" onChange={handleFilterChange} value={filters.semester} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink">
                                <option value="all">All Semesters</option>
                                {semesters.map(sem => <option key={sem} value={sem}>Semester {sem}</option>)}
                            </select>
                        </div>
                         <div>
                            <label htmlFor="section" className="block text-sm font-medium text-gray-700">Section</label>
                            <select id="section" name="section" onChange={handleFilterChange} value={filters.section} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink">
                                <option value="all">All Sections</option>
                                {sections.map(sec => <option key={sec} value={sec}>{sec}</option>)}
                            </select>
                        </div>
                    </div>
                    <div className="relative w-full sm:w-auto">
                        <label htmlFor="search-student" className="block text-sm font-medium text-gray-700">Search</label>
                        <div className="relative mt-1">
                            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                <Search className="h-5 w-5 text-gray-400" />
                            </div>
                            <input
                                id="search-student"
                                type="text"
                                placeholder="By name or USN..."
                                value={searchQuery}
                                onChange={(e) => setSearchQuery(e.target.value)}
                                className="pl-10 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink"
                            />
                        </div>
                    </div>
                </div>
            </div>

            <motion.div layout className="bg-white rounded-xl shadow-md overflow-hidden">
                <div className="overflow-x-auto">
                    <table className="min-w-full text-sm divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">USN</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Semester</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Section</th>
                                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                            {filteredStudents.map(student => (
                                <motion.tr layout key={student.id} initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
                                    <td className="px-6 py-4 whitespace-nowrap font-medium text-theme-text">{student.name}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-gray-500">{student.usn}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-theme-text-light">{student.semester}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-theme-text-light">{student.section}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                        <div className="flex items-center justify-end space-x-2">
                                            <button onClick={() => openModal('view', student)} className="text-blue-600 hover:text-blue-900 p-2 rounded-full hover:bg-blue-100 transition-colors">
                                                <Eye className="h-5 w-5" />
                                            </button>
                                            <button onClick={() => openModal('edit', student)} className="text-yellow-600 hover:text-yellow-900 p-2 rounded-full hover:bg-yellow-100 transition-colors">
                                                <Edit className="h-5 w-5" />
                                            </button>
                                            <button onClick={() => handleDelete(student.id)} className="text-red-600 hover:text-red-900 p-2 rounded-full hover:bg-red-100 transition-colors">
                                                <Trash2 className="h-5 w-5" />
                                            </button>
                                        </div>
                                    </td>
                                </motion.tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </motion.div>
            
            <Modal isOpen={isModalOpen} onClose={closeModal}>
                <StudentForm
                    initialData={selectedStudent}
                    onSubmit={handleFormSubmit}
                    onCancel={closeModal}
                    mode={modalMode}
                    departmentData={mockData.departments[department]}
                />
            </Modal>
        </div>
    );
};

export default ManageStudentsPage;
PK
     	7>[            	   src/data/PK
     	7>[#�.R  R     src/data/mockData.jsimport { faker } from '@faker-js/faker';

const DEPARTMENTS = {
  AIML: {
    name: "Artificial Intelligence & Machine Learning",
    semesters: {
      1: { subjects: ["Calculus & Linear Algebra", "Engineering Physics", "Basic Electrical Engineering", "Elements of Civil Engineering"] },
      2: { subjects: ["Advanced Calculus & Numerical Methods", "Engineering Chemistry", "Problem-Solving through Programming", "Basic Electronics & Communication"] }
    }
  },
  CSE: { name: "Computer Science & Engineering", semesters: {} },
  ECE: { name: "Electronics & Communication Engineering", semesters: {} }
};

const createStudent = (id, department, semester, section) => {
  const feesTotal = 85000;
  const feesPaid = faker.number.int({ min: 20000, max: feesTotal });
  
  const isHosteller = faker.datatype.boolean(0.3); // 30% are hostellers
  const transportOptions = isHosteller ? ['N/A'] : ['Day Scholar - Bus', 'Day Scholar - Own Vehicle', 'N/A'];
  const transportType = faker.helpers.arrayElement(transportOptions);

  let transportFee = { amount: 0, paid: true };
  if (transportType === 'Day Scholar - Bus') {
    transportFee = { amount: 15000, paid: faker.datatype.boolean() };
  }

  const subjects = DEPARTMENTS[department].semesters[semester].subjects;

  return {
    id,
    name: faker.person.fullName(),
    usn: `1VA2${3 - semester}${department}${String(id).padStart(3, '0')}`,
    phone: faker.phone.number(),
    email: faker.internet.email().toLowerCase(),
    fatherName: faker.person.fullName({ sex: 'male' }),
    fatherPhone: faker.phone.number(),
    semester,
    department,
    section,
    fees: {
      total: feesTotal,
      paid: feesPaid,
      remaining: feesTotal - feesPaid,
      admission: { applicable: faker.datatype.boolean(), amount: 25000, paid: faker.datatype.boolean() },
      exam: { amount: 1500, paid: faker.datatype.boolean() },
    },
    hostel: {
      applicable: isHosteller,
      amount: 75000,
      paid: isHosteller ? faker.datatype.boolean() : false
    },
    seatAllotment: faker.helpers.arrayElement(['KCET', 'Management']),
    transport: {
      type: transportType,
      fee: transportFee,
    },
    performance: subjects.map(subject => ({
      subject,
      score: faker.number.int({ min: 45, max: 100 })
    }))
  };
};

const createFaculty = (id, department) => {
  const roles = faker.helpers.arrayElements(['Subject Faculty', 'Proctor'], faker.number.int({ min: 1, max: 2 }));
  return {
    id,
    name: `Dr. ${faker.person.firstName()} ${faker.person.lastName()}`,
    ssn: `F${department}${String(id).padStart(3, '0')}`,
    email: faker.internet.email().toLowerCase(),
    phone: faker.phone.number(),
    qualification: faker.helpers.arrayElement(['M.Tech', 'Ph.D']),
    experience: faker.number.int({ min: 2, max: 15 }),
    salary: faker.number.int({ min: 50000, max: 150000 }),
    designation: faker.helpers.arrayElement(['Asst. Professor', 'Associate Professor']),
    allocations: {
      role: roles,
      semesters: [1, 2],
      sections: ['A', 'B', 'C'],
      subjects: faker.helpers.arrayElements(
        [...DEPARTMENTS.AIML.semesters[1].subjects, ...DEPARTMENTS.AIML.semesters[2].subjects],
        faker.number.int({ min: 1, max: 3 })
      )
    },
    password: faker.internet.password(),
  };
};

// Ensure balanced distribution of students across sections
const students = [];
const sections = ['A', 'B', 'C'];
let studentId = 1;
// Increased student count to 60 for more robust data distribution
for (let i = 0; i < 60; i++) {
    const semester = (i % 2) + 1; // Cycle through semesters 1 and 2
    const section = sections[i % sections.length]; // Cycle through sections A, B, C
    students.push(createStudent(studentId++, 'AIML', semester, section));
}


const faculty = Array.from({ length: 5 }, (_, i) => createFaculty(i + 1, 'AIML'));

// Add HOD
faculty.push({
    id: 6,
    name: `Dr. ${faker.person.fullName()}`,
    ssn: `FHODAIML001`,
    email: faker.internet.email().toLowerCase(),
    phone: faker.phone.number(),
    qualification: 'Ph.D',
    experience: 20,
    salary: 200000,
    designation: 'HOD',
    allocations: {
      role: ['Subject Faculty'],
      semesters: [1, 2],
      sections: ['A', 'B', 'C'],
      subjects: [DEPARTMENTS.AIML.semesters[2].subjects[2]]
    },
    password: faker.internet.password(),
});


export const mockData = {
  students,
  faculty,
  departments: DEPARTMENTS
};
PK
     	7>[X1��^  ^     src/components/Sidebar.jsximport React from 'react';
import { NavLink, useParams, useNavigate } from 'react-router-dom';
import { GraduationCap, LayoutDashboard, Users, UserCog, LogOut } from 'lucide-react';

const Sidebar = () => {
    const { department } = useParams();
    const navigate = useNavigate();

    const navItems = [
        { name: 'Dashboard', path: `/admin/dashboard/${department}`, icon: LayoutDashboard },
        { name: 'Manage Faculty', path: `/admin/manage-faculty/${department}`, icon: UserCog },
        { name: 'Manage Students', path: `/admin/manage-students/${department}`, icon: Users },
    ];

    const handleLogout = () => {
        // In a real app, clear auth tokens here
        navigate('/login');
    };
    
    const handleDeptChange = () => {
        navigate('/admin/select-department');
    }

    return (
        <aside className="w-64 flex-shrink-0 bg-white flex flex-col h-screen shadow-lg">
            <div className="h-20 flex items-center justify-center px-4 border-b">
                <GraduationCap className="h-8 w-8 text-theme-pink" />
                <h1 className="text-xl font-bold text-theme-text ml-3">Vidyamitra</h1>
            </div>
            
            <div className="flex items-center justify-center p-4 border-b">
                <button onClick={handleDeptChange} className="w-full text-center py-2 px-4 bg-theme-pink-light text-theme-pink font-semibold rounded-lg hover:bg-pink-100 transition-colors">
                    {department}
                    <span className="block text-xs font-normal">Change Department</span>
                </button>
            </div>

            <nav className="flex-1 px-4 py-4">
                <ul>
                    {navItems.map((item) => (
                        <li key={item.name}>
                            <NavLink
                                to={item.path}
                                className={({ isActive }) =>
                                    `flex items-center px-4 py-3 my-1 rounded-lg transition-colors duration-200 ${
                                    isActive
                                        ? 'bg-theme-pink text-white shadow-md'
                                        : 'text-theme-text-light hover:bg-theme-pink-light hover:text-theme-pink'
                                    }`
                                }
                            >
                                <item.icon className="h-5 w-5 mr-3" />
                                <span className="font-medium">{item.name}</span>
                            </NavLink>
                        </li>
                    ))}
                </ul>
            </nav>

            <div className="p-4 border-t">
                <button
                    onClick={handleLogout}
                    className="flex items-center w-full px-4 py-3 rounded-lg text-theme-text-light hover:bg-red-100 hover:text-red-600 transition-colors"
                >
                    <LogOut className="h-5 w-5 mr-3" />
                    <span className="font-medium">Logout</span>
                </button>
            </div>
        </aside>
    );
};

export default Sidebar;
PK
     	7>[               src/components/dashboard/PK
     	7>[i��A  A  %   src/components/dashboard/StatCard.jsximport React from 'react';
import { motion } from 'framer-motion';

const StatCard = ({ icon: Icon, title, value, colorClass }) => {
    const itemVariants = {
        hidden: { y: 20, opacity: 0 },
        visible: { y: 0, opacity: 1 },
    };

    return (
        <motion.div variants={itemVariants} className="card p-5">
            <div className="flex items-center justify-between">
                <p className="text-sm text-theme-text-light font-medium">{title}</p>
                <div className={`p-2 rounded-full ${colorClass}`}>
                    <Icon className="h-5 w-5 text-white" />
                </div>
            </div>
            <div className="mt-2">
                <p className="text-3xl font-bold text-theme-text">{value}</p>
            </div>
        </motion.div>
    );
};

export default StatCard;
PK
     	7>[����   �      vite.config.jsimport { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
});
PK
     	7>[�/��  �  +   src/components/dashboard/DashboardChart.jsximport React from 'react';
import ReactECharts from 'echarts-for-react';

const DashboardChart = ({ chartData }) => {
    if (!chartData || !chartData.data || chartData.data.length === 0) {
        return <div className="flex items-center justify-center h-full text-theme-text-light py-20">No data to display.</div>;
    }

    const colors = ['#38BDF8', '#F472B6', '#4ADE80']; // Light Blue, Pink, Parrot Green

    const getOverallHorizontalStackedOption = () => {
        return {
            tooltip: {
                trigger: 'axis',
                axisPointer: { type: 'shadow' },
                formatter: (params) => {
                    let tooltip = `${params[0].axisValue}<br/>`;
                    params.forEach(param => {
                        tooltip += `${param.marker} ${param.seriesName}: ${param.value} Avg Score<br/>`;
                    });
                    return tooltip;
                }
            },
            legend: {
                data: chartData.data.map(s => s.name),
                textStyle: { color: '#334155' }
            },
            grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },
            xAxis: {
                type: 'value',
                boundaryGap: [0, 0.01],
                axisLabel: { color: '#64748B' },
                max: 100
            },
            yAxis: {
                type: 'category',
                data: chartData.categories,
                axisLabel: { color: '#64748B', interval: 0 }
            },
            series: chartData.data.map((series, index) => ({
                ...series,
                itemStyle: {
                    color: colors[index % colors.length]
                }
            }))
        };
    };

    const getStackedVerticalOption = () => {
        return {
            tooltip: {
                trigger: 'axis',
                axisPointer: { type: 'shadow' }
            },
            legend: {
                data: chartData.data.map(s => s.name),
                textStyle: { color: '#334155' }
            },
            grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },
            xAxis: {
                type: 'category',
                data: chartData.categories,
                axisLabel: { 
                    interval: 0, 
                    rotate: 45,
                    color: '#64748B',
                    formatter: function (value) {
                        // Wrap text every 15 characters
                        return value.replace(/(.{15})/g, '$1\n');
                    }
                }
            },
            yAxis: {
                type: 'value',
                axisLabel: { color: '#64748B' },
                name: 'Number of Students Passed',
                nameLocation: 'middle',
                nameTextStyle: {
                    color: '#334155',
                    padding: [0, 0, 40, 0]
                }
            },
            series: chartData.data.map((series, index) => ({
                ...series,
                itemStyle: {
                    color: colors[index % colors.length]
                }
            }))
        };
    };

    const option = chartData.type === 'overall_stacked_horizontal' 
        ? getOverallHorizontalStackedOption() 
        : getStackedVerticalOption();

    return (
        <ReactECharts
            option={option}
            style={{ height: '450px', width: '100%' }}
            notMerge={true}
            lazyUpdate={true}
        />
    );
};

export default DashboardChart;
PK
     	7>[��H4y  y     src/components/Modal.jsximport React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X } from 'lucide-react';

const Modal = ({ isOpen, onClose, children }) => {
    const backdropVariants = {
        hidden: { opacity: 0 },
        visible: { opacity: 1 },
    };

    const modalVariants = {
        hidden: { y: "-50vh", opacity: 0 },
        visible: { y: "0", opacity: 1, transition: { type: 'spring', stiffness: 100 } },
        exit: { y: "50vh", opacity: 0 }
    };

    return (
        <AnimatePresence>
            {isOpen && (
                <motion.div
                    className="fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center p-4"
                    variants={backdropVariants}
                    initial="hidden"
                    animate="visible"
                    exit="hidden"
                    onClick={onClose}
                >
                    <motion.div
                        className="bg-white rounded-2xl shadow-xl w-full max-w-2xl max-h-[90vh] flex flex-col"
                        variants={modalVariants}
                        onClick={(e) => e.stopPropagation()}
                    >
                        <div className="flex-shrink-0 p-4 border-b flex justify-end">
                             <button
                                onClick={onClose}
                                className="p-2 rounded-full text-gray-500 hover:bg-gray-100 hover:text-gray-800 transition-colors"
                            >
                                <X className="h-6 w-6" />
                            </button>
                        </div>
                        <div className="flex-1 overflow-y-auto p-6">
                            {children}
                        </div>
                    </motion.div>
                </motion.div>
            )}
        </AnimatePresence>
    );
};

export default Modal;
PK
     	7>[               src/components/faculty/PK
     	7>[��OK/  K/  &   src/components/faculty/FacultyForm.jsximport React, { useState, useEffect } from 'react';

const FacultyForm = ({ initialData, onSubmit, onCancel, mode, departmentData }) => {
    const defaultState = {
        name: '',
        email: '',
        phone: '',
        qualification: 'M.Tech',
        experience: 0,
        salary: 50000,
        designation: 'Asst. Professor',
        password: '',
        confirmPassword: '',
        allocations: {
            role: [],
            semesters: [],
            sections: [],
            subjects: [],
        },
    };

    const [formData, setFormData] = useState(defaultState);
    const [errors, setErrors] = useState({});

    useEffect(() => {
        if (mode === 'edit' && initialData) {
            setFormData({ ...initialData, password: '', confirmPassword: '' });
        } else {
            setFormData(defaultState);
        }
    }, [initialData, mode]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleAllocationChange = (type, value) => {
        // Convert value to number if it's a semester
        const processedValue = (type === 'semesters') ? Number(value) : value;

        setFormData(prev => {
            const currentValues = prev.allocations[type];
            const newValues = currentValues.includes(processedValue)
                ? currentValues.filter(item => item !== processedValue)
                : [...currentValues, processedValue];
            return { ...prev, allocations: { ...prev.allocations, [type]: newValues } };
        });
    };

    const validate = () => {
        const newErrors = {};
        if (!formData.name) newErrors.name = "Name is required";
        if (!formData.email) newErrors.email = "Email is required";
        if (mode === 'add' || formData.password) {
            if (!formData.password) newErrors.password = "Password is required for new faculty";
            if (formData.password !== formData.confirmPassword) newErrors.confirmPassword = "Passwords do not match";
        }
        if (formData.allocations.role.length === 0) newErrors.roles = "At least one role must be selected";
        
        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        if (validate()) {
            onSubmit(formData);
        }
    };
    
    const allSubjects = Object.values(departmentData.semesters).flatMap(s => s.subjects);
    const allSemesters = Object.keys(departmentData.semesters);
    const allSections = ['A', 'B', 'C'];

    return (
        <form onSubmit={handleSubmit} className="space-y-6">
            <h2 className="text-2xl font-bold text-theme-text">{mode === 'add' ? 'Add New Faculty' : 'Edit Faculty Details'}</h2>
            
            {mode === 'edit' && (
                 <div>
                    <label className="block text-sm font-medium text-gray-700">SSN (Social Security Number)</label>
                    <input type="text" value={formData.ssn || ''} disabled className="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-gray-100" />
                </div>
            )}

            {/* Personal Details */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label className="block text-sm font-medium text-gray-700">Full Name</label>
                    <input type="text" name="name" value={formData.name} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink" />
                    {errors.name && <p className="text-red-500 text-xs mt-1">{errors.name}</p>}
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700">Designation</label>
                    <select name="designation" value={formData.designation} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink">
                        <option>Asst. Professor</option>
                        <option>Associate Professor</option>
                        <option>HOD</option>
                        <option>Teaching Assistant</option>
                        <option>Lab Technician</option>
                    </select>
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700">Email Address</label>
                    <input type="email" name="email" value={formData.email} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink" />
                    {errors.email && <p className="text-red-500 text-xs mt-1">{errors.email}</p>}
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700">Phone Number</label>
                    <input type="tel" name="phone" value={formData.phone} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink" />
                </div>
            </div>

            {/* Professional Details */}
             <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                 <div>
                    <label className="block text-sm font-medium text-gray-700">Qualification</label>
                    <select name="qualification" value={formData.qualification} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink">
                        <option>M.Tech</option>
                        <option>Ph.D</option>
                    </select>
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700">Experience (Years)</label>
                    <input type="number" name="experience" value={formData.experience} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink" />
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700">Salary</label>
                    <input type="number" name="salary" value={formData.salary} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink" />
                </div>
             </div>

            {/* Allocations */}
            <fieldset className="space-y-4 p-4 border rounded-lg">
                <legend className="text-lg font-semibold px-2 text-theme-pink">Allocations</legend>
                <div>
                    <label className="block text-sm font-medium text-gray-700">Roles</label>
                    <div className="mt-2 flex flex-wrap gap-x-4 gap-y-2">
                        {['Subject Faculty', 'Proctor'].map(role => (
                            <label key={role} className="flex items-center">
                                <input type="checkbox" checked={formData.allocations.role.includes(role)} onChange={() => handleAllocationChange('role', role)} className="h-4 w-4 rounded border-gray-300 text-theme-pink focus:ring-theme-pink" />
                                <span className="ml-2 text-sm text-gray-600">{role}</span>
                            </label>
                        ))}
                    </div>
                     {errors.roles && <p className="text-red-500 text-xs mt-1">{errors.roles}</p>}
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Allocated Semesters</label>
                        <div className="mt-2 flex flex-wrap gap-x-4 gap-y-2">
                            {allSemesters.map(sem => (
                                <label key={sem} className="flex items-center">
                                    <input type="checkbox" value={sem} checked={formData.allocations.semesters.includes(Number(sem))} onChange={() => handleAllocationChange('semesters', sem)} className="h-4 w-4 rounded border-gray-300 text-theme-pink focus:ring-theme-pink" />
                                    <span className="ml-2 text-sm text-gray-600">{sem}</span>
                                </label>
                            ))}
                        </div>
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Allocated Sections</label>
                        <div className="mt-2 flex flex-wrap gap-x-4 gap-y-2">
                            {allSections.map(sec => (
                                <label key={sec} className="flex items-center">
                                    <input type="checkbox" checked={formData.allocations.sections.includes(sec)} onChange={() => handleAllocationChange('sections', sec)} className="h-4 w-4 rounded border-gray-300 text-theme-pink focus:ring-theme-pink" />
                                    <span className="ml-2 text-sm text-gray-600">{sec}</span>
                                </label>
                            ))}
                        </div>
                    </div>
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700">Allocated Subjects</label>
                    <div className="mt-2 grid grid-cols-2 md:grid-cols-3 gap-2 max-h-32 overflow-y-auto p-2 border rounded-md">
                        {allSubjects.map(subject => (
                             <label key={subject} className="flex items-center">
                                <input type="checkbox" checked={formData.allocations.subjects.includes(subject)} onChange={() => handleAllocationChange('subjects', subject)} className="h-4 w-4 rounded border-gray-300 text-theme-pink focus:ring-theme-pink" />
                                <span className="ml-2 text-sm text-gray-600 truncate" title={subject}>{subject}</span>
                            </label>
                        ))}
                    </div>
                </div>
            </fieldset>

            {/* Credentials */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label className="block text-sm font-medium text-gray-700">Password</label>
                    <input type="password" name="password" value={formData.password} onChange={handleChange} placeholder={mode === 'edit' ? 'Leave blank to keep unchanged' : ''} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink" />
                    {errors.password && <p className="text-red-500 text-xs mt-1">{errors.password}</p>}
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700">Confirm Password</label>
                    <input type="password" name="confirmPassword" value={formData.confirmPassword} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink" />
                    {errors.confirmPassword && <p className="text-red-500 text-xs mt-1">{errors.confirmPassword}</p>}
                </div>
            </div>

            {/* Actions */}
            <div className="flex justify-end space-x-4 pt-4 border-t">
                <button type="button" onClick={onCancel} className="bg-gray-200 text-gray-700 font-bold py-2 px-4 rounded-lg hover:bg-gray-300 transition-colors">
                    Cancel
                </button>
                <button type="submit" className="btn-primary">
                    {mode === 'add' ? 'Add Faculty' : 'Save Changes'}
                </button>
            </div>
        </form>
    );
};

export default FacultyForm;
PK
     	7>[               src/components/students/PK
     	7>[1%�oB  oB  '   src/components/students/StudentForm.jsximport React, { useState, useEffect, useMemo } from 'react';

const StudentForm = ({ initialData, onSubmit, onCancel, mode, departmentData }) => {
    const defaultState = {
        name: '',
        usn: '',
        email: '',
        phone: '',
        fatherName: '',
        fatherPhone: '',
        semester: 1,
        section: 'A',
        seatAllotment: 'KCET',
        fees: {
            total: 85000,
            paid: 0,
            admission: { applicable: false, amount: 25000, paid: false },
            exam: { amount: 1500, paid: false },
        },
        hostel: {
            applicable: false,
            amount: 75000,
            paid: false,
        },
        transport: {
            type: 'N/A',
            fee: { amount: 15000, paid: false },
        },
    };

    const [formData, setFormData] = useState(defaultState);
    const [errors, setErrors] = useState({});

    useEffect(() => {
        if ((mode === 'edit' || mode === 'view') && initialData) {
            setFormData(prev => ({
                ...defaultState,
                ...initialData,
                hostel: initialData.hostel || defaultState.hostel,
                transport: initialData.transport || defaultState.transport,
            }));
        } else {
            setFormData(defaultState);
        }
    }, [initialData, mode]);

    const remainingFees = useMemo(() => {
        return (formData.fees.total || 0) - (formData.fees.paid || 0);
    }, [formData.fees.total, formData.fees.paid]);
    
    const isViewMode = mode === 'view';

    const handleChange = (e) => {
        const { name, value, type, checked } = e.target;
        const [section, field, subField] = name.split('.');

        const valueToSet = type === 'checkbox' ? checked : (type === 'number' ? parseFloat(value) || 0 : value);

        if (section === 'fees' || section === 'transport' || section === 'hostel') {
            if (subField) {
                setFormData(prev => ({
                    ...prev,
                    [section]: {
                        ...prev[section],
                        [field]: { ...prev[section][field], [subField]: valueToSet }
                    }
                }));
            } else {
                setFormData(prev => ({ ...prev, [section]: { ...prev[section], [field]: valueToSet } }));
            }
        } else {
            setFormData(prev => ({ ...prev, [name]: valueToSet }));
        }
    };
    
    const handleTransportChange = (e) => {
        const type = e.target.value;
        setFormData(prev => ({
            ...prev,
            transport: { ...prev.transport, type: type }
        }));
    };

    const validate = () => {
        const newErrors = {};
        if (!formData.name) newErrors.name = "Name is required";
        if (!formData.email) newErrors.email = "Email is required";
        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        if (validate()) {
            onSubmit({ ...formData, fees: { ...formData.fees, remaining: remainingFees } });
        }
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-8">
            <h2 className="text-2xl font-bold text-theme-text">{mode.charAt(0).toUpperCase() + mode.slice(1)} Student Details</h2>
            
            <fieldset disabled={isViewMode} className="space-y-4 p-4 border rounded-lg">
                <legend className="text-lg font-semibold px-2 text-theme-pink">Personal Information</legend>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Full Name</label>
                        <input type="text" name="name" value={formData.name} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink disabled:bg-gray-100" />
                        {errors.name && <p className="text-red-500 text-xs mt-1">{errors.name}</p>}
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Email Address</label>
                        <input type="email" name="email" value={formData.email} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink disabled:bg-gray-100" />
                        {errors.email && <p className="text-red-500 text-xs mt-1">{errors.email}</p>}
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Phone Number</label>
                        <input type="tel" name="phone" value={formData.phone} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink disabled:bg-gray-100" />
                    </div>
                     <div>
                        <label className="block text-sm font-medium text-gray-700">Father's Name</label>
                        <input type="text" name="fatherName" value={formData.fatherName} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink disabled:bg-gray-100" />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Father's Phone</label>
                        <input type="tel" name="fatherPhone" value={formData.fatherPhone} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink disabled:bg-gray-100" />
                    </div>
                </div>
            </fieldset>

             <fieldset disabled={isViewMode} className="space-y-4 p-4 border rounded-lg">
                <legend className="text-lg font-semibold px-2 text-theme-pink">Academic Information</legend>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {mode !== 'add' && (
                        <div className="md:col-span-2">
                            <label className="block text-sm font-medium text-gray-700">USN (University Seat Number)</label>
                            <input type="text" value={formData.usn || ''} disabled className="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-gray-100" />
                        </div>
                    )}
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Semester</label>
                        <select name="semester" value={formData.semester} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink disabled:bg-gray-100">
                           {Object.keys(departmentData.semesters).map(sem => <option key={sem} value={sem}>{sem}</option>)}
                        </select>
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Section</label>
                        <select name="section" value={formData.section} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink disabled:bg-gray-100">
                            <option>A</option><option>B</option><option>C</option>
                        </select>
                    </div>
                     <div className="md:col-span-2">
                        <label className="block text-sm font-medium text-gray-700">Seat Allotment</label>
                        <select name="seatAllotment" value={formData.seatAllotment} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink disabled:bg-gray-100">
                            <option>KCET</option><option>Management</option>
                        </select>
                    </div>
                </div>
            </fieldset>
            
            <fieldset disabled={isViewMode} className="space-y-4 p-4 border rounded-lg">
                <legend className="text-lg font-semibold px-2 text-theme-pink">Tuition Fees</legend>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Total Fees (₹)</label>
                        <input type="number" name="fees.total" value={formData.fees.total} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink disabled:bg-gray-100" />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Fees Paid (₹)</label>
                        <input type="number" name="fees.paid" value={formData.fees.paid} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink disabled:bg-gray-100" />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Remaining Dues (₹)</label>
                        <input type="number" value={remainingFees} disabled className="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-gray-100 text-red-600 font-semibold" />
                    </div>
                </div>
            </fieldset>

            <fieldset disabled={isViewMode} className="space-y-4 p-4 border rounded-lg">
                <legend className="text-lg font-semibold px-2 text-theme-pink">Additional Fees & Services</legend>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-4">
                        <div>
                            <div className="flex items-center">
                                <input id="hostelApplicable" type="checkbox" name="hostel.applicable" checked={formData.hostel.applicable} onChange={handleChange} disabled={isViewMode || formData.transport.type !== 'N/A'} className="h-4 w-4 rounded border-gray-300 text-theme-pink focus:ring-theme-pink disabled:opacity-50 disabled:cursor-not-allowed" />
                                <label htmlFor="hostelApplicable" className="ml-2 text-sm font-medium text-gray-700">Hosteller</label>
                            </div>
                            {formData.hostel.applicable && (
                                <div className="flex items-center gap-2 ml-6 mt-2">
                                    <label className="text-sm font-medium text-gray-700">Fee (₹):</label>
                                    <input type="number" name="hostel.amount" value={formData.hostel.amount} onChange={handleChange} className="block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink disabled:bg-gray-100" />
                                    <label className="flex items-center whitespace-nowrap">
                                        <input id="hostelFeePaid" type="checkbox" name="hostel.paid" checked={formData.hostel.paid} onChange={handleChange} className="h-4 w-4 rounded border-gray-300 text-theme-pink focus:ring-theme-pink" />
                                        <span className="ml-2 text-sm text-gray-600">Paid</span>
                                    </label>
                                </div>
                            )}
                        </div>
                        <div>
                            <div className="flex items-center">
                                <input id="admissionFeeApplicable" type="checkbox" name="fees.admission.applicable" checked={formData.fees.admission.applicable} onChange={handleChange} className="h-4 w-4 rounded border-gray-300 text-theme-pink focus:ring-theme-pink" />
                                <label htmlFor="admissionFeeApplicable" className="ml-2 text-sm font-medium text-gray-700">Admission Fee</label>
                            </div>
                            {formData.fees.admission.applicable && (
                                 <div className="flex items-center gap-2 ml-6 mt-2">
                                    <label className="text-sm font-medium text-gray-700">Fee (₹):</label>
                                    <input type="number" name="fees.admission.amount" value={formData.fees.admission.amount} onChange={handleChange} className="block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink disabled:bg-gray-100" />
                                    <label className="flex items-center whitespace-nowrap">
                                        <input id="admissionFeePaid" type="checkbox" name="fees.admission.paid" checked={formData.fees.admission.paid} onChange={handleChange} className="h-4 w-4 rounded border-gray-300 text-theme-pink focus:ring-theme-pink" />
                                        <span className="ml-2 text-sm text-gray-600">Paid</span>
                                    </label>
                                </div>
                            )}
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Exam Fee</label>
                            <div className="flex items-center gap-2 mt-1">
                                <input type="number" name="fees.exam.amount" value={formData.fees.exam.amount} onChange={handleChange} className="block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink disabled:bg-gray-100" placeholder="Amount" />
                                <label className="flex items-center whitespace-nowrap">
                                    <input id="examFeePaid" type="checkbox" name="fees.exam.paid" checked={formData.fees.exam.paid} onChange={handleChange} className="h-4 w-4 rounded border-gray-300 text-theme-pink focus:ring-theme-pink" />
                                    <span className="ml-2 text-sm text-gray-600">Paid</span>
                                </label>
                            </div>
                        </div>
                    </div>
                     <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Transport</label>
                        <select name="transport.type" value={formData.transport.type} onChange={handleTransportChange} disabled={isViewMode || formData.hostel.applicable} className="block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink disabled:bg-gray-100 disabled:cursor-not-allowed">
                            <option value="N/A">N/A</option>
                            <option value="Day Scholar - Bus">Day Scholar - Bus</option>
                            <option value="Day Scholar - Own Vehicle">Day Scholar - Own Vehicle</option>
                        </select>
                        {formData.transport.type === 'Day Scholar - Bus' && (
                             <div className="mt-2 flex items-center gap-2">
                                <label className="text-sm font-medium text-gray-700">Fee (₹):</label>
                                <input type="number" name="transport.fee.amount" value={formData.transport.fee.amount} onChange={handleChange} className="block w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink disabled:bg-gray-100" />
                                <label className="flex items-center whitespace-nowrap">
                                    <input id="transportFeePaid" type="checkbox" name="transport.fee.paid" checked={formData.transport.fee.paid} onChange={handleChange} className="h-4 w-4 rounded border-gray-300 text-theme-pink focus:ring-theme-pink" />
                                    <span className="ml-2 text-sm text-gray-600">Paid</span>
                                </label>
                            </div>
                        )}
                    </div>
                </div>
            </fieldset>

            <div className="flex justify-end space-x-4 pt-4 border-t">
                <button type="button" onClick={onCancel} className="bg-gray-200 text-gray-700 font-bold py-2 px-4 rounded-lg hover:bg-gray-300 transition-colors">
                    {isViewMode ? 'Close' : 'Cancel'}
                </button>
                {!isViewMode && (
                    <button type="submit" className="btn-primary">
                        {mode === 'add' ? 'Add Student' : 'Save Changes'}
                    </button>
                )}
            </div>
        </form>
    );
};

export default StudentForm;
PK
     	7>[               src/context/PK
     	7>[���j�  �     src/context/AuthContext.jsximport React, { createContext, useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const navigate = useNavigate();

    const login = (username, password) => {
        // Check for admin
        if (username.toLowerCase() === 'admin' && password === 'password') {
            const adminUser = { name: 'Admin', role: 'admin' };
            setUser(adminUser);
            navigate('/admin/select-department');
            return true;
        }

        return false;
    };

    const logout = () => {
        setUser(null);
        navigate('/login');
    };

    const value = { user, login, logout };

    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export const useAuth = () => {
    return useContext(AuthContext);
};
PK
     	7>[j˹�    -   src/components/dashboard/DepartmentEvents.jsximport React, { useState } from 'react';
import { Calendar, Plus, Tag } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

const DepartmentEvents = () => {
    const [events, setEvents] = useState([
        { id: 1, name: 'AI & Future Tech Summit', date: '2025-08-15' },
        { id: 2, name: 'Annual Codefest', date: '2025-09-20' },
    ]);
    const [eventName, setEventName] = useState('');
    const [eventDate, setEventDate] = useState('');

    const handleAddEvent = (e) => {
        e.preventDefault();
        if (eventName && eventDate) {
            const newEvent = {
                id: Date.now(),
                name: eventName,
                date: eventDate,
            };
            setEvents(prev => [newEvent, ...prev]);
            setEventName('');
            setEventDate('');
        }
    };

    const formatDate = (dateString) => {
        const options = { year: 'numeric', month: 'short', day: 'numeric' };
        return new Date(dateString).toLocaleDateString('en-US', options);
    };
    
    return (
        <div className="card p-6 h-full flex flex-col">
            <h2 className="text-xl font-bold text-theme-text mb-4 flex items-center">
                <Calendar className="mr-2 text-theme-pink" />
                Department Events
            </h2>
            <form onSubmit={handleAddEvent} className="space-y-3 mb-4">
                <input
                    type="text"
                    value={eventName}
                    onChange={(e) => setEventName(e.target.value)}
                    placeholder="Event Name"
                    className="w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink"
                />
                <div className="flex gap-2">
                    <input
                        type="date"
                        value={eventDate}
                        onChange={(e) => setEventDate(e.target.value)}
                        className="w-full rounded-md border-gray-300 shadow-sm focus:border-theme-pink focus:ring-theme-pink"
                    />
                    <button type="submit" className="btn-primary flex-shrink-0 px-3">
                        <Plus className="h-5 w-5" />
                    </button>
                </div>
            </form>
            <div className="flex-1 overflow-y-auto pr-2">
                <ul className="space-y-3">
                    <AnimatePresence>
                        {events.length > 0 ? events.map(event => (
                            <motion.li
                                key={event.id}
                                layout
                                initial={{ opacity: 0, y: -10 }}
                                animate={{ opacity: 1, y: 0 }}
                                exit={{ opacity: 0, x: -20 }}
                                className="flex items-center justify-between bg-theme-bg-alt p-3 rounded-lg"
                            >
                                <div className="flex items-center min-w-0">
                                    <Tag className="h-4 w-4 text-theme-pink mr-3 flex-shrink-0" />
                                    <p className="font-medium text-theme-text truncate">{event.name}</p>
                                </div>
                                <p className="text-sm font-semibold text-theme-pink-dark whitespace-nowrap ml-4">{formatDate(event.date)}</p>
                            </motion.li>
                        )) : (
                            <div className="text-center py-8 text-theme-text-light">
                                No events scheduled.
                            </div>
                        )}
                    </AnimatePresence>
                </ul>
            </div>
        </div>
    );
};

export default DepartmentEvents;
PK
     	7>[^���k  k  0   src/components/dashboard/FacultyDistribution.jsximport React, { useMemo } from 'react';
import { UserCog, UserCheck, User, Star } from 'lucide-react';
import { mockData } from '../../data/mockData';
import { useParams } from 'react-router-dom';

const iconMap = {
    'HOD': Star,
    'Associate Professor': UserCheck,
    'Asst. Professor': User,
    'Default': UserCog
};

const FacultyDistribution = () => {
    const { department } = useParams();

    const distribution = useMemo(() => {
        if (department !== 'AIML') return [];
        
        const counts = mockData.faculty.reduce((acc, faculty) => {
            acc[faculty.designation] = (acc[faculty.designation] || 0) + 1;
            return acc;
        }, {});

        return Object.entries(counts).map(([designation, count]) => ({
            designation,
            count,
            Icon: iconMap[designation] || iconMap['Default']
        }));
    }, [department]);

    if (department !== 'AIML') {
        return null;
    }

    return (
        <div className="card p-6 h-full">
            <h2 className="text-xl font-bold text-theme-text mb-4 flex items-center">
                <UserCog className="mr-2 text-theme-pink" />
                Faculty Distribution
            </h2>
            <ul className="space-y-4">
                {distribution.map(({ designation, count, Icon }) => (
                    <li key={designation} className="flex items-center justify-between">
                        <div className="flex items-center">
                            <Icon className="h-5 w-5 text-theme-text-light mr-3" />
                            <span className="font-medium text-theme-text">{designation}</span>
                        </div>
                        <span className="font-bold text-lg text-theme-pink">{count}</span>
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default FacultyDistribution;
PK
     	7>[%�/�  �     netlify.toml[build]
  command = "npm install && npm run build"
  publish = "dist"
  base = "/"
  ignore = "false"  # Never skip build
  force = "true"    # Force build even if no changes detected

[build.environment]
  NODE_VERSION = "18"
  CI = "true"       # Ensure we're in CI mode
  NETLIFY_BUILD_SKIP = "false"  # Never skip build

[build.processing]
  skip_processing = false  # Ensure processing is not skipped

[dev]
  command = "vite"
  port = 3000
  publish = "dist"PK
     	7>[���@B  B  	   README.md# Project Setup
    
    To run this project, follow these steps:
    
    1. Extract the zip file.
    2. Run `npm install` to install dependencies.
    3. Run `npm run dev` to start the development server.
    
    This project was generated through Alpha. For more information, visit [dualite.dev](https://dualite.dev).PK 
     	7>[���      
                 .gitignorePK 
     	7>[��2�
  
               6   eslint.config.jsPK 
     	7>[ۆ2k  k  
             n  index.htmlPK 
     	7>[�ґ�  �                 package.jsonPK 
     	7>[S0�^   ^                �  postcss.config.jsPK 
     	7>[                        _  src/PK 
     	7>[>��  �               �  src/App.jsxPK 
     	7>[�t��@  @               �  src/index.cssPK 
     	7>[�bխ  �                 src/main.jsxPK 
     	7>[��0��  �               �  tailwind.config.jsPK 
     	7>[            
            �  src/pages/PK 
     	7>[T�&��  �                 src/pages/LoginPage.jsxPK 
     	7>[��7F�  �  "             �1  src/pages/DepartmentSelectPage.jsxPK 
     	7>[                        ;  src/components/PK 
     	7>[��wh#  #               /;  src/components/AdminLayout.jsxPK 
     	7>[�/:Wu!  u!               �=  src/pages/DashboardPage.jsxPK 
     	7>[���'  �'               <_  src/pages/ManageFacultyPage.jsxPK 
     	7>[�03��(  �(                5�  src/pages/ManageStudentsPage.jsxPK 
     	7>[            	            #�  src/data/PK 
     	7>[#�.R  R               J�  src/data/mockData.jsPK 
     	7>[X1��^  ^               ��  src/components/Sidebar.jsxPK 
     	7>[                        d�  src/components/dashboard/PK 
     	7>[i��A  A  %             ��  src/components/dashboard/StatCard.jsxPK 
     	7>[����   �                �  vite.config.jsPK 
     	7>[�/��  �  +             '�  src/components/dashboard/DashboardChart.jsxPK 
     	7>[��H4y  y               S�  src/components/Modal.jsxPK 
     	7>[                        �  src/components/faculty/PK 
     	7>[��OK/  K/  &             7�  src/components/faculty/FacultyForm.jsxPK 
     	7>[                        � src/components/students/PK 
     	7>[1%�oB  oB  '             � src/components/students/StudentForm.jsxPK 
     	7>[                        �[ src/context/PK 
     	7>[���j�  �               �[ src/context/AuthContext.jsxPK 
     	7>[j˹�    -             �_ src/components/dashboard/DepartmentEvents.jsxPK 
     	7>[^���k  k  0             o src/components/dashboard/FacultyDistribution.jsxPK 
     	7>[%�/�  �               �v netlify.tomlPK 
     	7>[���@B  B  	             �x README.mdPK    $ $ �	  1z   
